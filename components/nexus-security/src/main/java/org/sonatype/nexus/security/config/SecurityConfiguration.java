/*
 * Sonatype Nexus (TM) Open Source Version
 * Copyright (c) 2008-2015 Sonatype, Inc.
 * All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
 *
 * This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
 * which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
 *
 * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
 * of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
 * Eclipse Foundation. All other trademarks are the property of their respective owners.
 */
package org.sonatype.nexus.security.config;

/**
 * The security configuration.
 *
 * Note: This class has been hgenerated by modello and copied over
 */
@SuppressWarnings("all")
public class SecurityConfiguration
    implements org.sonatype.configuration.Configuration, java.io.Serializable
{

  /**
   * If enabled, the users will be able to access DAV
   * resources unauthenticated, if Realm allows. To
   * set rights for unauthenticated users, use
   * "anonymous" username.
   */
  private boolean anonymousAccessEnabled = false;

  /**
   * The username used to log in as anonymous user.
   * The account should be enabled and existing according to
   * the used JSecurity realm!
   */
  private String anonymousUsername;

  /**
   * The username used to log in as anonymous user.
   * The account should be enabled and existing according to
   * the used JSecurity realm!
   */
  private String anonymousPassword;

  /**
   * Field realms.
   */
  private java.util.List<String> realms;

  //-----------/
  //- Methods -/
  //-----------/

  /**
   * Method addRealm.
   */
  public void addRealm(String string) {
    getRealms().add(string);
  } //-- void addRealm( String )

  /**
   * Get the username used to log in as anonymous user. The
   * account should be enabled and existing according to
   * the used JSecurity realm!
   *
   * @return String
   */
  public String getAnonymousPassword() {
    return this.anonymousPassword;
  } //-- String getAnonymousPassword()

  /**
   * Get the username used to log in as anonymous user. The
   * account should be enabled and existing according to
   * the used JSecurity realm!
   *
   * @return String
   */
  public String getAnonymousUsername() {
    return this.anonymousUsername;
  } //-- String getAnonymousUsername()

  /**
   * Method getRealms.
   *
   * @return List
   */
  public java.util.List<String> getRealms() {
    if (this.realms == null) {
      this.realms = new java.util.ArrayList<String>();
    }

    return this.realms;
  } //-- java.util.List<String> getRealms()

  /**
   * Get if enabled, the users will be able to access DAV
   * resources unauthenticated, if Realm allows. To
   * set rights for unauthenticated users, use
   * "anonymous" username.
   *
   * @return boolean
   */
  public boolean isAnonymousAccessEnabled() {
    return this.anonymousAccessEnabled;
  } //-- boolean isAnonymousAccessEnabled()

  /**
   * Method removeRealm.
   */
  public void removeRealm(String string) {
    getRealms().remove(string);
  } //-- void removeRealm( String )

  /**
   * Set if enabled, the users will be able to access DAV
   * resources unauthenticated, if Realm allows. To
   * set rights for unauthenticated users, use
   * "anonymous" username.
   */
  public void setAnonymousAccessEnabled(boolean anonymousAccessEnabled) {
    this.anonymousAccessEnabled = anonymousAccessEnabled;
  } //-- void setAnonymousAccessEnabled( boolean )

  /**
   * Set the username used to log in as anonymous user. The
   * account should be enabled and existing according to
   * the used JSecurity realm!
   */
  public void setAnonymousPassword(String anonymousPassword) {
    this.anonymousPassword = anonymousPassword;
  } //-- void setAnonymousPassword( String )

  /**
   * Set the username used to log in as anonymous user. The
   * account should be enabled and existing according to
   * the used JSecurity realm!
   */
  public void setAnonymousUsername(String anonymousUsername) {
    this.anonymousUsername = anonymousUsername;
  } //-- void setAnonymousUsername( String )

  /**
   * Set the list of JSecurity realms used in the application.
   */
  public void setRealms(java.util.List<String> realms) {
    this.realms = realms;
  } //-- void setRealms( java.util.List )

}
